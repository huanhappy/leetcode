#include "stdafx.h"
// 
// 给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。
// 如果目标值不存在于数组中，返回它将会被按顺序插入的位置。
// 你可以假设数组中无重复元素。
// 
// 示例 1:
// 
// 输入: [1,3,5,6], 5
// 输出: 2
// 示例 2:
// 
// 输入: [1,3,5,6], 2
// 输出: 1
// 示例 3:
// 
// 输入: [1,3,5,6], 7
// 输出: 4
// 示例 4:
// 
// 输入: [1,3,5,6], 0
// 输出: 0
// 

class Solution {
public:
	int searchInsert(const vector<int>& nums, int target) {
// 		if (nums.empty())
// 			return 0;
// 		int low = 0, high = nums.size() - 1;
// 		while (low <= high)
// 		{
// 			int mid = low + (high - low) / 2;
// 			if (nums[mid] == target)
// 				return mid;
// 			else if (nums[mid] < target)
// 				low = mid + 1;
// 			else
// 				high = mid-1;
// 		}
// 		return high + 1;
		auto it = lower_bound(nums.begin(), nums.end(), target);;
		return it - nums.begin();
	}
};

int main()
{
	Solution s;
	cout << s.searchInsert({ 1, 3, 5, 6 }, 5);
	cout << s.searchInsert({ 1, 3, 5, 6 }, 2);
	cout << s.searchInsert({ 1, 3, 5, 6 }, 7);
	cout << s.searchInsert({ 1, 3, 5, 6 }, 0);
}